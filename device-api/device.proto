syntax = "proto3";
package SpaceX.API.Device;

service Device
{
    /// Send a single request.
    rpc Handle(Request) returns (Response);
}

message ToDevice
{
    oneof message
    {
        /// A traditional RPC request which expects exactly one response.
        Request request = 1;
    }
}

message FromDevice
{
    oneof message
    {
        /// A traditional RPC response to exactly one request.
        Response response = 1;
    }
}

message Request
{
    oneof request
    {
        /// Get diagnostics information.
        GetDiagnosticsRequest get_diagnostics = 6000;
    }
}

message Response
{
    oneof response
    {
        WifiGetDiagnosticsResponse wifi_get_diagnostics = 6000;
        DishGetDiagnosticsResponse dish_get_diagnostics = 6001;
    }
}


message GetDiagnosticsRequest
{
}

/// Diagnostics for the Starlink WiFi router.
message WifiGetDiagnosticsResponse
{
    /// Unique identifier of the WiFi router.
    string id = 1;

    /// Hardware version of the WiFi router.
    string hardware_version = 2;

    /// Software version of the WiFi router.
    string software_version = 3;
}

/// Diagnostics for the Starlink dish.
message DishGetDiagnosticsResponse
{
    /// Unique identifier of the dish.
    string id = 1;

    /// Hardware version of the dish.
    string hardware_version = 2;

    /// Software version of the dish.
    string software_version = 3;

    /// Approximate time zone of the device in relation to UTC.
    int32 utc_offset_s = 4;

    /// Result of the hardware self test that the UT runs on boot.
    enum TestResult {
        /// No hardware test has been run.
        NO_RESULT = 0;

        /// The hardware test passed.
        PASSED = 1;

        /// The hardware test failed. Something is wrong.
        FAILED = 2;
    }
    TestResult hardware_self_test = 7;

    message Alerts
    {
        /// The dish is heating.
        bool dish_is_heating = 1;

        /// The dish CPU is throttled because its temperature is too high.
        bool dish_thermal_throttle = 2;

        /// The dish is not enabled because its temperature is extremely high.
        bool dish_thermal_shutdown = 3;

        /// The dish is throttled because the temperature of the external power
        /// supply is too high.
        bool power_supply_thermal_throttle = 4;

        /// The dish motors are stuck, and the dish may not be aligned properly.
        /// This may happen if something is blocking the movement of the dish.
        bool motors_stuck = 5;

        /// The dish is not oriented vertically enough and may be impacting service.
        bool mast_not_near_vertical = 6;

        /// The negotiated ethernet speeds to the dish are low and may be preventing
        /// maximum service throughput.
        bool slow_ethernet_speeds = 7;

        /// The dish has a software upgrade that is installed, and will be applied
        /// after the next reboot.
        bool software_install_pending = 8;

        /// The dish is moving too fast for its configured policy.
        bool moving_too_fast_for_policy = 9;
    }
    Alerts alerts = 5;

    /// The dish may be disabled for a variety of reasons.
    /// This code may be unknown while the dish is loading state
    /// of if the dish does not support this metric.
    enum DisablementCode
    {
        // Unknown state.
        UNKNOWN = 0;

        /// There is no disablement, things are working fine.
        OKAY = 1;

        /// No active account, or expired subscription for this user.
        NO_ACTIVE_ACCOUNT = 2;

        /// User is too far from their service address.
        TOO_FAR_FROM_SERVICE_ADDRESS = 3;

        /// User is in the Ocean and is not allowed to be.
        IN_OCEAN = 4;

        /// In a country the user isn't allowed to get service in.
        INVALID_COUNTRY = 5;

        /// The user is in a country that is blocked for general service.
        BLOCKED_COUNTRY = 6;
    }
    DisablementCode disablement_code = 6;
}